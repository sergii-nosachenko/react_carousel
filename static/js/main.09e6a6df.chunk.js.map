{"version":3,"sources":["components/InputControl/InputControl.tsx","components/CheckboxControl/CheckboxControl.tsx","components/Carousel/helpers.ts","components/Carousel/Carousel.tsx","config.ts","App.tsx","index.tsx"],"names":["InputControl","state","title","props","name","type","value","min","max","Infinity","step","handleValueChange","event","newValue","target","getAttribute","setState","handleControlChange","this","className","htmlFor","id","onChange","Component","CheckboxControl","checked","getFrameSize","frameSize","itemWidth","itemGap","carouselMaxWidth","maxFrames","Math","floor","Carousel","firstItemIndex","getCurrentOffset","getPrevButtonEnabled","images","infinite","length","getNextButtonEnabled","handleNext","prevSate","minItemIndex","nextIndex","handlePrev","prevIndex","animationDuration","carouselStyle","maxWidth","width","listStyle","transitionDuration","transform","style","map","image","index","src","alt","uuid","classNames","onClick","controlsData","imagesData","App","carousel","controls","prevState","control","key","Number","Boolean","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.09e6a6df.chunk.js","sourcesContent":["import { ChangeEvent, Component } from 'react';\n\nimport { NumberInput } from '../../types/Controls';\n\nimport './InputControl.scss';\n\ntype Props = NumberInput & {\n  handleControlChange: (name: string, value: number) => void,\n};\n\ntype State = NumberInput;\n\nexport class InputControl extends Component<Props, State> {\n  state: Readonly<State> = {\n    title: this.props.title,\n    name: this.props.name,\n    type: this.props.type,\n    value: this.props.value,\n    min: this.props.min || 0,\n    max: this.props.max || Infinity,\n    step: this.props.step || 1,\n  };\n\n  handleValueChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const newValue = +event.target.value;\n    const name = event.target.getAttribute('name') || '';\n\n    this.setState({\n      value: newValue,\n    });\n\n    this.props.handleControlChange(name, newValue);\n  };\n\n  render() {\n    const {\n      title,\n      name,\n      type,\n      value,\n      min,\n      max,\n      step,\n    } = this.state;\n\n    return (\n      <div className=\"InputControl\">\n        <label\n          htmlFor={name}\n          className=\"InputControl__label\"\n        >\n          {title}\n        </label>\n        <input\n          type={type}\n          name={name}\n          className=\"InputControl__input\"\n          id={name}\n          value={value}\n          min={min}\n          max={max}\n          step={step}\n          onChange={this.handleValueChange}\n        />\n      </div>\n    );\n  }\n}\n","import { ChangeEvent, Component } from 'react';\n\nimport { Checkbox } from '../../types/Controls';\n\nimport './CheckboxControl.scss';\n\ntype Props = Checkbox & {\n  handleControlChange: (name: string, value: boolean) => void,\n};\n\ntype State = Checkbox;\n\nexport class CheckboxControl extends Component<Props, State> {\n  state: Readonly<State> = {\n    title: this.props.title,\n    name: this.props.name,\n    type: this.props.type,\n    value: this.props.value,\n  };\n\n  handleValueChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.target.checked;\n    const name = event.target.getAttribute('name') || '';\n\n    this.setState({\n      value: newValue,\n    });\n\n    this.props.handleControlChange(name, newValue);\n  };\n\n  render() {\n    const {\n      title,\n      name,\n      type,\n      value,\n    } = this.state;\n\n    return (\n      <div className=\"CheckboxControl\">\n        <label\n          htmlFor={name}\n          className=\"CheckboxControl__label\"\n        >\n          {title}\n        </label>\n        <input\n          type={type}\n          name={name}\n          className=\"CheckboxControl__input\"\n          id={name}\n          checked={value}\n          onChange={this.handleValueChange}\n        />\n      </div>\n    );\n  }\n}\n","import CarouselType from '../../types/CarouselType';\n\ntype Props = CarouselType;\n\nexport const getFrameSize = (props: Props): number => {\n  const {\n    frameSize,\n    itemWidth,\n    itemGap,\n    carouselMaxWidth,\n  } = props;\n  const maxFrames = Math.floor(\n    (carouselMaxWidth + itemGap) / (itemWidth + itemGap),\n  );\n\n  return frameSize <= maxFrames ? frameSize : maxFrames;\n};\n","import { Component, CSSProperties } from 'react';\nimport uuid from 'react-uuid';\nimport classNames from 'classnames';\n\nimport { getFrameSize } from './helpers';\n\nimport CarouselType from '../../types/CarouselType';\n\nimport './Carousel.scss';\n\ntype Props = CarouselType;\n\ntype State = {\n  firstItemIndex: number,\n};\n\nexport class Carousel extends Component<Props, State> {\n  state: Readonly<State> = {\n    firstItemIndex: 0,\n  };\n\n  getCurrentOffset = () => {\n    const { firstItemIndex } = this.state;\n    const {\n      itemWidth,\n      itemGap,\n    } = this.props;\n\n    return firstItemIndex * (itemWidth + itemGap);\n  };\n\n  getPrevButtonEnabled = () => {\n    const { firstItemIndex } = this.state;\n    const { images, infinite } = this.props;\n\n    return infinite\n      || (firstItemIndex !== 0 && images.length > getFrameSize(this.props));\n  };\n\n  getNextButtonEnabled = () => {\n    const { firstItemIndex } = this.state;\n    const { images, infinite } = this.props;\n\n    return infinite\n      || (firstItemIndex !== images.length - getFrameSize(this.props));\n  };\n\n  handleNext = () => this.setState((prevSate) => {\n    const { firstItemIndex } = prevSate;\n    const {\n      images,\n      step,\n      infinite,\n    } = this.props;\n    const frameSize = getFrameSize(this.props);\n    const minItemIndex = images.length >= frameSize\n      ? images.length - frameSize\n      : 0;\n    let nextIndex = firstItemIndex + step;\n\n    if (nextIndex > images.length - frameSize && infinite) {\n      nextIndex = 0;\n    }\n\n    const nextItemIndex = nextIndex <= minItemIndex\n      ? nextIndex\n      : minItemIndex;\n\n    return {\n      firstItemIndex: nextItemIndex,\n    };\n  });\n\n  handlePrev = () => this.setState((prevSate) => {\n    const { firstItemIndex } = prevSate;\n    const {\n      images,\n      step,\n      infinite,\n    } = this.props;\n    const minItemIndex = 0;\n    const frameSize = getFrameSize(this.props);\n    let prevIndex = firstItemIndex - step;\n\n    if (prevIndex < 0 && infinite) {\n      prevIndex = images.length - frameSize;\n      prevIndex = prevIndex >= 0 ? prevIndex : 0;\n    }\n\n    const prevItemIndex = prevIndex >= minItemIndex\n      ? prevIndex\n      : minItemIndex;\n\n    return {\n      firstItemIndex: prevItemIndex,\n    };\n  });\n\n  render() {\n    const {\n      images,\n      itemWidth,\n      itemGap,\n      carouselMaxWidth,\n      animationDuration,\n    } = this.props;\n\n    const frameSize = getFrameSize(this.props);\n\n    const carouselStyle: CSSProperties = {\n      maxWidth: carouselMaxWidth,\n      width: (itemWidth + itemGap) * frameSize - itemGap,\n    };\n\n    const listStyle: CSSProperties = {\n      transitionDuration: `${animationDuration}ms`,\n      transform: `translateX(-${this.getCurrentOffset()}px)`,\n    };\n\n    return (\n      <div\n        className=\"Carousel\"\n        style={carouselStyle}\n      >\n        <div className=\"Carousel__list-wrapper\">\n          <ul\n            className=\"Carousel__list\"\n            style={listStyle}\n          >\n            {images.map((image, index) => (\n              <li\n                className=\"Carousel__item\"\n                key={uuid()}\n              >\n                <img\n                  src={image}\n                  width={itemWidth}\n                  alt={`${index + 1}`}\n                />\n              </li>\n            ))}\n          </ul>\n        </div>\n\n        <div className=\"Carousel__controls\">\n          <button\n            className={\n              classNames(\n                'Carousel__button',\n                'Carousel__button--prev',\n                {\n                  'Carousel__button--disabled': !this.getPrevButtonEnabled(),\n                },\n              )\n            }\n            type=\"button\"\n            onClick={this.handlePrev}\n          >\n            &larr;\n          </button>\n          <button\n            className={\n              classNames(\n                'Carousel__button',\n                'Carousel__button--next',\n                {\n                  'Carousel__button--disabled': !this.getNextButtonEnabled(),\n                },\n              )\n            }\n            type=\"button\"\n            data-cy=\"next\"\n            onClick={this.handleNext}\n          >\n            &rarr;\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","import { NumberInput, Checkbox } from './types/Controls';\n\ntype Controls = (NumberInput | Checkbox);\n\nexport const controlsData: Controls[] = [\n  {\n    title: 'Item width',\n    name: 'itemWidth',\n    type: 'number',\n    value: 130,\n    min: 10,\n    step: 1,\n  },\n  {\n    title: 'Frame size',\n    name: 'frameSize',\n    type: 'number',\n    value: 3,\n    min: 1,\n    step: 1,\n  },\n  {\n    title: 'Step',\n    name: 'step',\n    type: 'number',\n    value: 3,\n    min: 1,\n    step: 1,\n  },\n  {\n    title: 'Animation duration',\n    name: 'animationDuration',\n    type: 'number',\n    value: 1000,\n    min: 0,\n    max: 5000,\n    step: 100,\n  },\n  {\n    title: 'Infinite',\n    name: 'infinite',\n    type: 'checkbox',\n    value: false,\n  },\n];\n\nexport const imagesData: string[] = [\n  './img/1.png',\n  './img/2.png',\n  './img/3.png',\n  './img/4.png',\n  './img/5.png',\n  './img/6.png',\n  './img/7.png',\n  './img/8.png',\n  './img/9.png',\n  './img/10.png',\n];\n","import { Component } from 'react';\nimport { InputControl } from './components/InputControl';\nimport { CheckboxControl } from './components/CheckboxControl';\nimport { Carousel } from './components/Carousel';\n\nimport { controlsData, imagesData } from './config';\n\nimport CarouselType from './types/CarouselType';\nimport { NumberInput, Checkbox } from './types/Controls';\n\nimport './App.scss';\n\ntype Controls = (NumberInput | Checkbox);\ninterface State {\n  carousel: CarouselType,\n  controls: Controls[],\n}\n\nclass App extends Component<{}, State> {\n  state: Readonly<State> = {\n    carousel: {\n      images: imagesData,\n      step: 3,\n      frameSize: 3,\n      itemWidth: 130,\n      itemGap: 20,\n      carouselMaxWidth: 1300,\n      animationDuration: 1000,\n      infinite: false,\n    },\n    controls: controlsData,\n  };\n\n  handleControlChange = (name: string, value: number | boolean) => {\n    if (!(name in this.state.carousel)) {\n      return;\n    }\n\n    this.setState((prevState: State) => ({\n      carousel: {\n        ...prevState.carousel,\n        [name]: value,\n      },\n    }));\n  };\n\n  render() {\n    const { carousel, controls } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1\n          className=\"App__title\"\n          data-cy=\"title\"\n        >\n          {`Carousel with ${carousel.images.length} images`}\n        </h1>\n\n        <div className=\"App__controls\">\n          {controls.map(control => {\n            const key = control.name as keyof CarouselType;\n\n            switch (control.type) {\n              case 'number': {\n                const value = Number((key in carousel\n                  ? carousel[key]\n                  : control.value\n                ) || 0);\n\n                return (\n                  <InputControl\n                    {...control}\n                    value={value}\n                    key={key}\n                    handleControlChange={this.handleControlChange}\n                  />\n                );\n              }\n\n              case 'checkbox': {\n                const value = Boolean((key in carousel\n                  ? carousel[key]\n                  : control.value\n                ) || false);\n\n                return (\n                  <CheckboxControl\n                    {...control}\n                    value={value}\n                    key={control.name}\n                    handleControlChange={this.handleControlChange}\n                  />\n                );\n              }\n\n              default:\n                return null;\n            }\n          })}\n        </div>\n\n        <Carousel {...carousel} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}